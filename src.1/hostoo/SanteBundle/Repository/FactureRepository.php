<?php

namespace hostoo\SanteBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * FactureRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FactureRepository extends EntityRepository
{
    public function trouverDate($date)
    {
        $qb=$this->createQueryBuilder('u');
        $qb->select('u')
            ->where('u.datefacture LIKE :datee')
            ->setParameter('datee',$date.'%');
        return $qb->getQuery()->getResult();
    }

    public function facturesParServices($temps)
    {
        $req=$this->createQueryBuilder('a');
        $req->select('cat.nom as nom,COUNT(tar) as actes, sum(tar.prix) as montant')
            ->join('a.commandes','cmd')
            ->join('cmd.tarifs','tar')
            ->join('tar.actes','act')
            ->join('act.categories','cat')
            ->where('a.datefacture LIKE :ladate')
            ->setParameter('ladate',$temps.'%')
            ->groupBy('cat')
        ;

        return $req->getQuery()->getResult();
    }
    public function listeDate($date)
    {
        $qb=$this->createQueryBuilder('u');
        $qb->select('u')
            ->where('u.datefacture LIKE :datee')
            ->setParameter('datee',$date.'%')->orderBy('u.id','desc');

        return $qb->getQuery()->getResult();
    }


    public function listeDateToday($valid,$date)
    {
        $qb=$this->createQueryBuilder('u');
        $qb->select('u')
            ->where('u. validation=:valid and u.datefacture LIKE :datee')
            ->setParameter('valid',$valid)->setParameter('datee',$date.'%')
            ->orderBy('u.id','asc');

        return $qb->getQuery()->getResult();
    }

    public function facturesNonPayes($date)
    {

        $qb=$this->createQueryBuilder('u');
        $qb->select('u')
            ->where('u. validation=0 or u.solde=1')
            ->andWhere('u.datefacture LIKE :datee')
            ->setParameter('datee',$date.'%')
            ->orderBy('u.id','asc');

        return $qb->getQuery()->getResult();
    }

    public function facturesPayes($date)
    {

        $qb = $this->createQueryBuilder('u');
        $qb->select('u')
            ->where('u. validation=1')
            ->andWhere('u.datefacture LIKE :datee')
            ->setParameter('datee', $date . '%')
            ->orderBy('u.id', 'asc');

        return $qb->getQuery()->getResult();

    }

    public function facturesNonPayesToutes()
    {

        $qb=$this->createQueryBuilder('u');
        $qb->select('u')
            ->where('u. validation=0 or u.solde=1')
            ->orderBy('u.id','asc');

        return $qb->getQuery()->getResult();
    }

    public function facturesPayesToutes()
    {

        $qb=$this->createQueryBuilder('u');
        $qb->select('u')
            ->where('u. validation=1')
            ->orderBy('u.id','asc');

        return $qb->getQuery()->getResult();
    }

    public function recettesConventionnes($mois,$annee)
    {
        $qb=$this->createQueryBuilder('a');
        $qb->select('a')
            ->join('a.episode','e')
            ->join('e.patient','p')
            ->join('p.societe','d')
            ->join('d.convention','c')
            ->where('c.id = 1')
            ->andWhere('a.datefacture LIKE :mois')
            ->setParameter('mois',$annee.'-'.$mois.'%')
            ;
        return $qb->getQuery()->getResult();

    }

    public function recettesTotalesConventionnes($mois,$annee)
    {
        $qb=$this->createQueryBuilder('a');
        $qb->select('SUM(a.prix) as total')
            ->join('a.episode','e')
            ->join('e.patient','p')
            ->join('p.societe','d')
            ->join('d.convention','c')
            ->where('c.id = 1')
            ->andWhere('a.datefacture LIKE :mois')
            ->setParameter('mois',$annee.'-'.$mois.'%')
        ;
        return $qb->getQuery()->getResult();

    }

    public function recettesPrives($mois,$annee)
    {
        $qb=$this->createQueryBuilder('a');
        $qb->select('a')
            ->join('a.episode','e')
            ->join('e.patient','p')
            ->join('p.societe','d')
            ->join('d.convention','c')
            ->where('c.id = 2')
            ->andWhere('a.datefacture LIKE :mois')
            ->setParameter('mois',$annee.'-'.$mois.'%')
            ;
        return $qb->getQuery()->getResult();

    }

    public function recettesTotalesPrives($mois,$annee)
    {
        $qb=$this->createQueryBuilder('a');
        $qb->select('SUM(a.prix) as total')
            ->join('a.episode','e')
            ->join('e.patient','p')
            ->join('p.societe','d')
            ->join('d.convention','c')
            ->where('c.id = 2')
            ->andWhere('a.datefacture LIKE :mois')
            ->setParameter('mois',$annee.'-'.$mois.'%')
        ;
        return $qb->getQuery()->getResult();

    }


    public function recetteDuMoisPatient($mois,$annee)
    {
        $qb=$this->createQueryBuilder('a');
        $qb->select('a')
            ->join('a.episode','e')
            ->join('e.patient','p')
            ->join('p.societe','d')
            ->join('d.convention','c')
            ->where('a.datefacture LIKE :mois')
            ->setParameter('mois',$annee.'-'.$mois.'%')
            ->groupBy('p.id');
        return $qb->getQuery()->getResult();

    }



}
