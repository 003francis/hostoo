imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: services.yml }

# Put parameters here that don't need to change on each machine where the app is deployed
# http://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: fr

framework:
    #esi:             ~
    translator:      { fallbacks: ["%locale%"] }
    secret:          "%secret%"
    router:
        resource: "%kernel.root_dir%/config/routing.yml"
        strict_requirements: ~
    form:            ~
    csrf_protection: ~
    validation:      { enable_annotations: true }
    #serializer:      { enable_annotations: true }
    templating:
        engines: ['twig']
    default_locale:  "%locale%"
    trusted_hosts:   ~
    trusted_proxies: ~
    session:
        # handler_id set to null will use default session handler from php.ini
        handler_id:  ~
    fragments:       ~
    http_method_override: true

# Twig Configuration
twig:
    debug:            "%kernel.debug%"
    strict_variables: "%kernel.debug%"
#    form_themes:
#        - 'bootstrap_3_layout.html.twig'
#        - 'TetranzSelect2EntityBundle:Form:fields.html.twig'

# Doctrine Configuration
doctrine:
    dbal:
        driver:   pdo_mysql
        host:     "%database_host%"
        port:     "%database_port%"
        dbname:   "%database_name%"
        user:     "%database_user%"
        password: "%database_password%"
        charset:  UTF8
        # if using pdo_sqlite as your database driver:
        #   1. add the path in parameters.yml
        #     e.g. database_path: "%kernel.root_dir%/data/data.db3"
        #   2. Uncomment database_path in parameters.yml.dist
        #   3. Uncomment next line:
        #     path:     "%database_path%"

    orm:
        auto_generate_proxy_classes: "%kernel.debug%"
        naming_strategy: doctrine.orm.naming_strategy.underscore
        auto_mapping: true
        dql:
            datetime_functions:
                MONTH: DoctrineExtensions\Query\Mysql\Month
                YEAR: DoctrineExtensions\Query\Mysql\Year
                WEEK: DoctrineExtensions\Query\Mysql\Week
                DAY: DoctrineExtensions\Query\Mysql\Day
                DATE: DoctrineExtensions\Query\Mysql\Date
                CONCATE: DoctrineExtensions\Query\Mysql\ConcatWs
                YEARMONTH: DoctrineExtensions\Query\Mysql\YearMonth

# Swiftmailer Configuration
swiftmailer:
    transport: "%mailer_transport%"
    host:      "%mailer_host%"
    username:  "%mailer_user%"
    password:  "%mailer_password%"
    spool:     { type: memory }
#fos
fos_user:
    db_driver:     orm                       # Le type de BDD à utiliser, nous utilisons l'ORM Doctrine depuis le début
    firewall_name: main                      # Le nom du firewall derrière lequel on utilisera ces utilisateurs
    user_class:    hostoo\UserBundle\Entity\Utilisateur # La classe de l'entité User que nous utilisons
    registration:
        form:
            type: hostoo_user_utilisateur

#ras_flash_alert:
#    template: '::flashAlerts.html.twig'     # defaults to 'RasFlashAlertBundle::layout.html.twig'
 #   isAddStyles: false                      # defaults to true
  #  isAddJsAlertClose: false                # defaults to true

fos_js_routing:
    cache_control:
        # All are optional, defaults shown
        public: false   # can be true (public) or false (private)
        maxage: null    # integer value, e.g. 300
        smaxage: null   # integer value, e.g. 300
        expires: null   # anything that can be fed to "new \DateTime($expires)", e.g. "5 minutes"
        vary: []        # string or array, e.g. "Cookie" or [ Cookie, Accept ]
xiidea_easy_audit:
    entity_class : hostoo\SanteBundle\Entity\AuditLog
    user_property: nom
    events:
        - security.interactive_login
        - security.interactive_logout
        - security.authentication.failure
        - security.authentication.failure : user.event_resolver
    doctrine_entities :                                                          #Optional
         hostoo\SanteBundle\Entity\Episode : [created, updated, deleted]
         hostoo\SanteBundle\Entity\Facture : [created, updated, deleted]
         hostoo\SanteBundle\Entity\Caisse : [created, updated, deleted]
         hostoo\SanteBundle\Entity\BSCaisse : [created, updated, deleted]
         hostoo\SanteBundle\Entity\CaissePrive : [created, updated, deleted]
         hostoo\SanteBundle\Entity\Patient : [created, updated, deleted]
         hostoo\PharmacieBundle\Entity\Produit : [created, updated, deleted]
         hostoo\PharmacieBundle\Entity\Stock : [created, updated, deleted]
         hostoo\PharmacieBundle\Entity\StockTot : [created, updated, deleted]
         hostoo\PharmacieBundle\Entity\StockTot : [created, updated, deleted]
         hostoo\UserBundle\Entity\Utilisateur : [created, updated, deleted]
         hostoo\GestionBundle\Entity\Proprietaire : [created, updated, deleted]
    logger_channel:
        xiidea.easy_audit.logger.service: ["info", "debug"]
        file.logger: ["!info", "!debug"]
#Custom Event Resolver Service
services:
    user.event_resolver:
         class: Xiidea\EasyAuditBundle\Resolver\UserEventResolver
         calls:
            - [ setContainer,[ @service_container ] ]

    xiidea.easy_audit.prepersist_listener :
        class: hostoo\SanteBundle\Listener\AuditLogPrePersistListener
        tags:
            - { name: doctrine.event_listener, event: prePersist  }
#doctrine_migrations:
#    dir_name: "%kernel.root_dir%/DoctrineMigrations"
#    namespace: Application\Migrations
#    table_name: migration_versions
#    name: Application Migrations
#    organize_migrations: false # Version >=1.2 Possible values are: "BY_YEAR", "BY_YEAR_AND_MONTH", false

#services:
#    datadog.event_subscriber.audit:
#        class: 'DataDog\AuditBundle\EventSubscriber\AuditSubscriber'
#        arguments: ["@security.token_storage"]
#        tags:
#          - { name: doctrine.event_subscriber, connection: default }
#        calls:
#            - ['setLabeler', [['hostoo\GestionBundle\Labler\AuditLabler', 'getLabel']]]